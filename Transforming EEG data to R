

# If the sewd is not finished by a "/", for example, '.../R/Test/Test1', it would consider anything
#contains inside both Test and Test1. 
library(stringr)
library(dplyr)
library(readxl)
library("magrittr")
library("rio")
library("xlsx")
library("data.table")

library(data.table)

rm(list = ls())
setwd("C:/Users/slotfi/Documents/R/Loop/Entire ERPS 59Data/")
folderlist <- c(104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,
                123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,139,140,141,142,143,144,
                145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165)
 #folderlist = 104
# files <- list.files()
 
 # Name of bins should specifically defined based on Matlab/ERPlab bin extraction. 
Bins = c("AbsPure","Abs20","Con20","Incon20","Abs60","Con60","Incon60", "Confli20","Confli60", "Filter20","Filter60")
BinExs = "Abs20"
SaveFolder ="SH_GrndMtxBins"

# Confli60  Filter20
for (i in folderlist){
  
  #if (!file.exists(paste0(dir, "/FERP", i))) {
  #  print(paste0("There is no such a folder for FERP", i))
  #} else { 
  
  #setwd(paste0(dir, "", i))
  if (!file.exists(paste0(i,"_SH_LargeEpoch_",BinExs,"_Corr.txt"))) {
    print(paste0("NO such a FILE  for ", i,"_SH_LargeEpoch_",BinExs,"_Corr.txt"))
    
  } else { 
    
    #matrix_read1 = list()
    #matrix_read1 = NULL
    
    GrndMatrix = numeric(900)

      for (j in Bins){
      matrix_read <- read.table(paste0(i,"_SH_LargeEpoch_",j,"_Corr.txt"), header= F, sep="\t", encoding = "utf8") # sep=","
      if (sum(is.na(matrix_read[[ncol(matrix_read)]]))>0) {
        matrix_read <- matrix_read[,1:ncol(matrix_read)-1]
      }
      #matrix_read <- matrix_read[,2:ncol(matrix_read)] Number "2" indicates at what column to start grabbing. 
      matrix_read <- as.matrix(matrix_read[1:nrow(matrix_read),])
      matrix_read <- t(matrix_read) # Transpose that
      vector <- rep(as.numeric(substr(i,1,3)),nrow(matrix_read)) #chaning matrix_trans to matrix_read to copy the first three digits and put it as the last column.
      matrix_read <- cbind(matrix_read,vector) #each object here could a matrix to concatinated. 
      
      matrix_read[1,39] = "Subject" # change the first cell of last column from an integer to ID character.
      
      matrix_read = as.data.frame(matrix_read)
      matrix_read = matrix_read %>% select(1,39,34,35,36,37) # only keep the variables (electrodes) of interest (here Fs - Os)
      #  matrix_read = matrix_read %>% filter (row_number() == 1 & 402:n())
      
      names(matrix_read) <- as.character(unlist(matrix_read[1,])) # to unlist the first row and make it the header.
      matrix_read <- matrix_read[-1, ] # to drop excessive first row
      
      
      new_col_names=paste0(j,"_",colnames(matrix_read[,1:ncol(matrix_read)])) # the number indicate at what column start renaming..
      
      names(matrix_read) <- c(names(matrix_read)[0], new_col_names) # number index indicates at what column to start binding. 0 for 1st col.
      
      
      GrndMatrix = cbind(GrndMatrix,data.frame(matrix_read))
      #colnames(matrix_read1) <- c("Subject","TrialType","RESP","RT","ACC","RT_wo_Outliers","TrialsID") # to rename columns
    }
  
    GrndMatrix = GrndMatrix[c(401:900),-1]  # only grab two specific range of data..here grabbing first row (names) and -200 to 800.
  
  write.table(GrndMatrix,file=paste0("C:/Users/slotfi/Documents/R/Loop/Entire ERPS 59Data/",SaveFolder,"/",
                                      str_replace(i, pattern = ".txt", replacement = ""),".csv"), sep = ",", row.names=F, col.names=T)
  
} }


# If the sewd is not finished by a "/", for example, '.../R/Test/Test1', it would consider anything
#contains inside both Test and Test1. 
# if dplyr does not work...do this...

detach(library:plyr)
detach(package:plyr)
library(dplyr)

setwd(paste0("C:/Users/slotfi/Documents/R/Loop/Entire ERPS 59Data/",SaveFolder,"/"))

file_list <- list.files()

dataset <- ldply(file_list, read.table, header= TRUE, sep=",")  #You can turn header to false to get rid of headers,but

write.table(dataset, file=paste0(SaveFolder,"_All58D.csv"), row.names = F, sep="," )



##### if dplyr does not work...
myPath = paste0("C:/Users/slotfi/Documents/R/Loop/Entire ERPS 59Data/",SaveFolder,"/")
# myPath = paste0("C:/Users/slotfi/Documents/R/Loop/SHK_Entire ERPS 83Data/",Threat,"/",Condition,"/")

df <- list.files(path= myPath, full.names = TRUE) %>% 
  lapply(read_csv) %>% 
  bind_rows 

write.table(df, file=paste0(myPath,SaveFolder,"_All58D.csv"), row.names = F, sep="," )

